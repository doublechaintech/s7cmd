/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.doublechaintech.tool.s7command;

import com.github.s7connector.api.DaveArea;
import com.github.s7connector.api.S7Connector;
import com.github.s7connector.api.factory.S7ConnectorFactory;

class Param{
    private String ip="192.168.2.100";
    private int port=102;

    private int dbBock=1;
    private int size=1;

    public String getIp() {
        return ip;
    }

    public void setIp(String ip) {
        this.ip = ip;
    }

    public int getPort() {
        return port;
    }

    public void setPort(int port) {
        this.port = port;
    }

    public int getDbBock() {
        return dbBock;
    }

    public void setDbBock(int dbBock) {
        this.dbBock = dbBock;
    }

    public int getSize() {
        return size;
    }

    public void setSize(int size) {
        this.size = size;
    }


    public boolean isReadOperation() {
        return readOperation;
    }

    public void setReadOperation(boolean readOperation) {
        this.readOperation = readOperation;
    }

    private boolean readOperation=true;


    public static Param createFromArgs(){

        Param p=new Param();
        p.setIp(System.getProperty("s7.ip","192.168.10.1"));
        p.setPort(Integer.parseInt(System.getProperty("s7.port","102")));
        p.setDbBock(Integer.parseInt(System.getProperty("s7.db","38")));
        p.setSize(Integer.parseInt(System.getProperty("s7.size","1")));
        return p;
    }

    @Override
    public String toString() {
        return "Param{" +
                "ip='" + ip + '\'' +
                ", port=" + port +
                ", dbBock=" + dbBock +
                ", size=" + size +
                ", readOperation=" + readOperation +
                '}';
    }
}
public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void execute(Param param){

        if(param.isReadOperation()){
            readData(param);
        }


    }

    private static void readData(Param param) {

        S7Connector connector = connectWith(param);
        byte[] bs = connector.read(DaveArea.DB, param.getDbBock(), param.getSize(), 0);

        for (int i = 0; i < bs.length; i++) {
            if(i%17==0){
                System.out.print("\n");
            }
            System.out.print(String.format("%02X ", bs[i]));

        }

        //System.out.println("OK");

    }

    private static S7Connector connectWith(Param param) {
        return S7ConnectorFactory
                .buildTCPConnector()

                .withHost(param.getIp())
                .withPort(param.getPort())
                .withRack(0) //optional
                .withSlot(0) //optional
                .build();
    }

    public static void main(String[] args) {
        Param p=Param.createFromArgs();
        System.out.println(p);
        try{
            execute(p);
        }catch (Exception e){
            e.printStackTrace();

        }
    }
}
